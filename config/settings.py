"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from datetime import timedelta
from pathlib import Path
from dotenv import load_dotenv
from django.conf.global_settings import LOGIN_URL


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-ix_ge=(r_nl8*s5*2w5f6jkn%t*^q(o=z8etg=9fhj)!2w-z*h'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

AUTH_USER_MODEL = 'users.User'


# Application definition

INSTALLED_APPS = [
    # django
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    #install
    'rest_framework',
    'rest_framework_simplejwt',

    #телеграм
    # 'telegram_bot',
    #документация
    'drf_yasg',

    #celery
    'django_celery_beat',

    #cors
    'corsheaders',

    #myapp
    'users',
    'main',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    # cors
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
  ]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

BD_ENGINE = load_dotenv('BD_ENGINE')  # take environment variables from .env.
BD_NAME = load_dotenv('BD_NAME')  # take environment variables from .env.
BD_USER = load_dotenv('BD_USER')  # take environment variables from .env.
BD_PASSWORD = load_dotenv('BD_PASSWORD')  # take environment variables from .env.
BD_HOST = load_dotenv('BD_HOST')  # take environment variables from .env.
BD_PORT = load_dotenv('BD_PORT')  # take environment variables from .env.



# PostgreSQL_Key = os.getenv('PostgreSQL_Key')
# TELEGRAM_BOT_API_KEY=os.getenv('TELEGRAM_BOT_API_KEY')

DATABASES = {
    'default': {
        'ENGINE': BD_ENGINE,
        'NAME': BD_NAME,
        'USER': BD_USER,
        'PASSWORD': BD_PASSWORD,
        'HOST': BD_HOST,
        'PORT': BD_PORT
    }
}




# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Настройки JWT-токенов
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ]
}

# Настройки срока действия токенов
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=15),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
}

STRIPE_CREATE_URL = 'https://api.stripe.com/v1/payment_intents'
STRIPE_RETRIEVE_URL = 'https://api.stripe.com/v1/payment_intents/pi_1Gt09Z2eZvKYlo2C8ZiS4b2r'
STRIPE_AUTH ='pk_test_51Nnm8HFlTYpLw2PHisnKZg3IOPQIqzPH8YJeZ6LGBtrBs6IcYJFNukq638cCIg9f6qhnoEVpJwwGBvJCIIo5duPT005Jyp2pZy'


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

############ redis ##############

CACHES = {
    "default": {
        "BACKEND":	"django.core.cache.backends.redis.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379",
        }
    }

# Настройки для брокера Redis
REDIS_HOST = load_dotenv('REDIS_HOST')
REDIS_PORT = load_dotenv('REDIS_PORT')

# Настройки для Celery
# CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

# Настройки для Celery периодические задачи
CELERY_BEAT_SCHEDULE = {
    'check_last_login': {
        'task': 'main.tasks_celery.check_periodicity',  # Путь к задаче
        'schedule': timedelta(minutes=60*24),  # Расписание выполнения задачи (например, каждые сутки)
    },
}

# URL-адрес брокера сообщений
CELERY_BROKER_URL = 'redis://localhost:6379' # Например, Redis, который по умолчанию работает на порту 6379

# URL-адрес брокера результатов, также Redis
CELERY_RESULT_BACKEND = 'redis://localhost:6379'

# Часовой пояс для работы Celery
# CELERY_TIMEZONE = "Australia/Tasmania"

# Флаг отслеживания выполнения задач
CELERY_TASK_TRACK_STARTED = True

# Максимальное время на выполнение задачи
CELERY_TASK_TIME_LIMIT = 30 * 60

#CORS
CORS_ALLOWED_ORIGINS = [  'https://localhost:8000',  # Замените на адрес вашего фронтенд-сервера  #'http://localhost:8000'  # это адрес вашего фронтенд-сервера. Замените его на адрес своего фронтенд-сервера или '*' , если вы хотите разрешить запросы от любого домена.
]

CSRF_TRUSTED_ORIGINS = [ "https://read-and-write.example.com", #  Замените на адрес вашего фронтенд-сервера   # и добавьте адрес бэкенд-сервера
]

CORS_ALLOW_ALL_ORIGINS = True
